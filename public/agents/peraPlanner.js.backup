/**
 * Pera Planner AI - Autonomous Long-term Financial Planning Assistant
 * Implements agentic behavior with strategic reasoning, life planning, and autonomy
 */

// Import Firebase modules
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.5.0/firebase-auth.js";
import { getUserData, getUserTransactions, getUserBankAccounts } from "../js/firestoredb.js";

class PeraPlannerAI {
    constructor() {
        this.userProfile = null;
        this.financialPlan = null;
        this.planningComplete = false;
        this.currentAge = 28; // Default age
        this.retirementAge = 60; // Filipino retirement planning target
        this.testMode = window.location.search.includes('test=true'); // Enable test mode with ?test=true
        this.debugMode = window.location.search.includes('debug=true'); // Enable debug mode with ?debug=true
        this.auth = getAuth();
        this.currentUser = null;
        
        console.log(`üîß Pera Planner initialized in ${this.testMode ? 'TEST' : this.debugMode ? 'DEBUG' : 'NORMAL'} mode`);
        
        this.initializeElements();
        this.loadFilipinoFinancialWisdom();
        
        // Only setup auth if not in test/debug mode
        if (!this.testMode && !this.debugMode) {
            this.setupAuthListener();
        }
    }

    // Setup Firebase auth listener
    setupAuthListener() {
        onAuthStateChanged(this.auth, (user) => {
            if (user) {
                console.log('‚úÖ User authenticated:', user.uid);
                this.currentUser = user;
                // Don't auto-start here, let the start() method handle it
            } else {
                console.log('‚ùå User not authenticated');
                // Only redirect if we're not in test mode
                if (!this.testMode) {
                    console.log('Redirecting to login...');
                    window.location.href = '/pages/login.html';
                }
            }
        });
    }

    // Initialize DOM elements with error handling
    initializeElements() {
        this.elements = {
            loadingState: document.getElementById('loading-state'),
            contentState: document.getElementById('content-state'),
            emptyState: document.getElementById('empty-state'),
            financialTimeline: document.getElementById('financial-timeline'),
            investmentContent: document.getElementById('investment-content'),
            careerContent: document.getElementById('career-content'),
            balancingActContent: document.getElementById('balancing-act-content')
        };

        // Validate all elements exist
        let missingElements = [];
        Object.entries(this.elements).forEach(([key, element]) => {
            if (!element) {
                console.warn(`‚ùå Element ${key} not found in DOM`);
                missingElements.push(key);
            } else {
                console.log(`‚úÖ Element ${key} found`);
            }
        });

        if (missingElements.length > 0) {
            throw new Error(`Missing DOM elements: ${missingElements.join(', ')}`);
        }
    }

    // Filipino financial planning wisdom and life stage strategies
    loadFilipinoFinancialWisdom() {
        this.filipinoLifeStages = {
            early20s: {
                name: "Fresh Graduate / Young Professional",
                ageRange: "22-26",
                priorities: ["Emergency Fund", "Skill Building", "Basic Insurance"],
                strategies: ["Ipon Challenge", "Side Hustle", "Professional Development"],
                savingsRate: 0.15
            },
            late20s: {
                name: "Career Building Phase",
                ageRange: "27-32",
                priorities: ["Investment Start", "Career Growth", "Relationship Planning"],
                strategies: ["Stock Market Entry", "Real Estate Research", "Professional Certification"],
                savingsRate: 0.20
            },
            early30s: {
                name: "Family Formation Stage",
                ageRange: "33-38",
                priorities: ["Family Planning", "Home Ownership", "Children's Education"],
                strategies: ["House Down Payment", "Educational Insurance", "Family Budget"],
                savingsRate: 0.18
            },
            late30s: {
                name: "Wealth Accumulation Phase",
                ageRange: "39-45",
                priorities: ["Investment Growth", "Business Opportunities", "Parent Care"],
                strategies: ["Diversified Portfolio", "Business Investment", "Health Insurance"],
                savingsRate: 0.25
            },
            40s: {
                name: "Peak Earning Years",
                ageRange: "46-52",
                priorities: ["Retirement Planning", "Children's College", "Wealth Preservation"],
                strategies: ["Retirement Fund Max", "College Fund", "Insurance Review"],
                savingsRate: 0.30
            },
            50s: {
                name: "Pre-Retirement Phase",
                ageRange: "53-59",
                priorities: ["Retirement Security", "Health Preparation", "Legacy Planning"],
                strategies: ["Conservative Investments", "Health Fund", "Estate Planning"],
                savingsRate: 0.35
            }
        };

        this.filipinoInvestmentLadder = {
            beginner: {
                name: "Simula (Beginning)",
                instruments: ["Digital Banks", "Time Deposits", "UITF", "Pag-IBIG MP2"],
                riskLevel: "Low",
                expectedReturn: "3-6%",
                timeline: "1-3 years"
            },
            intermediate: {
                name: "Paglaki (Growth)",
                instruments: ["Stock Market", "Index Funds", "Real Estate", "Bonds"],
                riskLevel: "Medium",
                expectedReturn: "6-12%",
                timeline: "3-10 years"
            },
            advanced: {
                name: "Yaman (Wealth)",
                instruments: ["Blue Chip Stocks", "REITs", "Business", "International Funds"],
                riskLevel: "Medium-High",
                expectedReturn: "8-15%",
                timeline: "10+ years"
            }
        };

        this.filipinoGoalTemplates = {
            shortTerm: [
                { name: "Emergency Fund", target: 6, unit: "months expenses", priority: "high" },
                { name: "Gadget Upgrade", target: 50000, unit: "pesos", priority: "low" },
                { name: "Vacation sa Probinsya", target: 30000, unit: "pesos", priority: "medium" }
            ],
            mediumTerm: [
                { name: "Bahay Down Payment", target: 500000, unit: "pesos", priority: "high" },
                { name: "Car Purchase", target: 300000, unit: "pesos", priority: "medium" },
                { name: "Wedding Fund", target: 400000, unit: "pesos", priority: "high" }
            ],
            longTerm: [
                { name: "Retirement Fund", target: 10000000, unit: "pesos", priority: "high" },
                { name: "Children's Education", target: 2000000, unit: "pesos per child", priority: "high" },
                { name: "Business Capital", target: 1000000, unit: "pesos", priority: "medium" }
            ]
        };
    }

    // Generate user profile from real Firestore data
    async generateUserProfile() {
        try {
            if (!this.currentUser) {
                throw new Error('User not authenticated');
            }

            console.log('üìä Fetching user data from Firestore...');
            
            // Get user data, transactions, and bank accounts
            const [userData, transactions, bankAccounts] = await Promise.all([
                getUserData(this.currentUser.uid),
                getUserTransactions(this.currentUser.uid),
                getUserBankAccounts(this.currentUser.uid)
            ]);

            console.log('üìä Raw data fetched:', { userData, transactions, bankAccounts });

            // Calculate financial metrics from real data
            const financialMetrics = this.calculateFinancialMetrics(transactions, bankAccounts);
            
            // Extract user profile information
            const profile = {
                age: userData?.age || this.currentAge,
                monthlyIncome: financialMetrics.monthlyIncome,
                monthlyExpenses: financialMetrics.monthlyExpenses,
                currentSavings: financialMetrics.totalSavings,
                employmentType: userData?.employmentType || 'employed',
                industry: userData?.industry || 'General',
                dependents: userData?.dependents || 0,
                lifeStage: this.determineLifeStage(userData?.age || this.currentAge),
                riskTolerance: userData?.riskTolerance || 'moderate',
                primaryGoals: userData?.primaryGoals || ['emergency_fund', 'retirement'],
                hasInsurance: userData?.hasInsurance || false,
                hasInvestments: financialMetrics.hasInvestments,
                location: userData?.location || 'Philippines',
                financialKnowledge: userData?.financialKnowledge || 'beginner',
                transactionCount: transactions.length,
                accountCount: bankAccounts.length
            };

            console.log('‚úÖ Generated user profile:', profile);
            return profile;

        } catch (error) {
            console.error('‚ùå Error generating user profile:', error);
            // Fallback to basic profile if data fetch fails
            return this.generateFallbackProfile();
        }
    }

    // Calculate financial metrics from transactions and accounts
    calculateFinancialMetrics(transactions, bankAccounts) {
        const now = new Date();
        const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate());
        
        // Filter recent transactions (last 3 months)
        const recentTransactions = transactions.filter(tx => {
            const txDate = new Date(tx.date || tx.timestamp);
            return txDate >= threeMonthsAgo;
        });

        // Calculate monthly income and expenses
        let totalIncome = 0;
        let totalExpenses = 0;
        let hasInvestments = false;

        recentTransactions.forEach(tx => {
            const amount = parseFloat(tx.amount) || 0;
            if (tx.type === 'income') {
                totalIncome += amount;
            } else if (tx.type === 'expense') {
                totalExpenses += amount;
            }
            
            // Check for investment-related transactions
            if (tx.category && (
                tx.category.toLowerCase().includes('investment') ||
                tx.category.toLowerCase().includes('stock') ||
                tx.category.toLowerCase().includes('mutual') ||
                tx.category.toLowerCase().includes('crypto')
            )) {
                hasInvestments = true;
            }
        });

        // Calculate monthly averages (divide by 3 for 3-month period)
        const monthlyIncome = Math.round(totalIncome / 3);
        const monthlyExpenses = Math.round(totalExpenses / 3);

        // Calculate total savings from bank accounts
        const totalSavings = bankAccounts.reduce((sum, account) => {
            return sum + (parseFloat(account.balance) || 0);
        }, 0);

        return {
            monthlyIncome: monthlyIncome || 50000, // Default if no data
            monthlyExpenses: monthlyExpenses || 35000, // Default if no data
            totalSavings: totalSavings || 100000, // Default if no data
            hasInvestments
        };
    }

    // Fallback profile when real data is unavailable
    generateFallbackProfile() {
        console.log('‚ö†Ô∏è Using fallback profile due to insufficient data');
        return {
            age: this.currentAge,
            monthlyIncome: 50000,
            monthlyExpenses: 35000,
            currentSavings: 100000,
            employmentType: 'employed',
            industry: 'General',
            dependents: 0,
            lifeStage: this.determineLifeStage(this.currentAge),
            riskTolerance: 'moderate',
            primaryGoals: ['emergency_fund', 'retirement'],
            hasInsurance: false,
            hasInvestments: false,
            location: 'Philippines',
            financialKnowledge: 'beginner',
            transactionCount: 0,
            accountCount: 0,
            isUsingFallback: true
        };
    }

    // Determine life stage based on age
    determineLifeStage(age) {
        if (age >= 22 && age <= 26) return 'early20s';
        if (age >= 27 && age <= 32) return 'late20s';
        if (age >= 33 && age <= 38) return 'early30s';
        if (age >= 39 && age <= 45) return 'late30s';
        if (age >= 46 && age <= 52) return '40s';
        if (age >= 53 && age <= 59) return '50s';
        return 'late20s'; // default
    }

    // AI Analysis Engine - Autonomous long-term planning
    async createFinancialPlan(profile) {
        const plan = {
            lifeStageAnalysis: this.analyzeLifeStage(profile),
            financialRoadmap: this.createFinancialRoadmap(profile),
            investmentStrategy: this.developInvestmentStrategy(profile),
            careerProjection: this.projectCareerPath(profile),
            familyBalancing: this.analyzeLifeBalance(profile),
            riskAssessment: this.assessLongTermRisks(profile),
            milestoneTargets: this.calculateMilestoneTargets(profile)
        };

        // Simulate AI processing time
        await this.simulateAIProcessing();
        return plan;
    }

    // Analyze current life stage and transitions
    analyzeLifeStage(profile) {
        const currentStage = this.filipinoLifeStages[profile.lifeStage];
        const nextStageKey = this.getNextLifeStage(profile.lifeStage);
        const nextStage = this.filipinoLifeStages[nextStageKey];

        return {
            current: currentStage,
            next: nextStage,
            transitionYears: this.calculateTransitionYears(profile.age),
            readinessScore: this.calculateStageReadiness(profile),
            recommendations: this.getStageRecommendations(profile)
        };
    }

    // Create a comprehensive financial roadmap
    createFinancialRoadmap(profile) {
        const roadmap = [];
        const currentYear = new Date().getFullYear();
        const retirementYear = currentYear + (this.retirementAge - profile.age);

        // Emergency Fund (Year 1) - Personalized based on current savings
        const emergencyFundTarget = profile.monthlyExpenses * 6;
        const emergencyFundProgress = Math.min(profile.currentSavings / emergencyFundTarget, 1);
        
        if (emergencyFundProgress < 1) {
            roadmap.push({
                year: currentYear + 1,
                age: profile.age + 1,
                milestone: "Emergency Fund Complete",
                description: `Build 6-month emergency fund (‚Ç±${emergencyFundTarget.toLocaleString()}) - Currently ${Math.round(emergencyFundProgress * 100)}% complete`,
                target: emergencyFundTarget,
                strategy: profile.transactionCount > 10 ? "Optimize current spending patterns + Automated savings" : "Start tracking expenses + 'Ipon Challenge' method",
                priority: "high",
                currentProgress: emergencyFundProgress
            });
        }

        // Investment Start (Year 2-3)
        roadmap.push({
            year: currentYear + 2,
            age: profile.age + 2,
            milestone: "Investment Portfolio Launch",
            description: "Start investing in stock market and UITF with ‚Ç±10,000 monthly",
            target: 120000,
            strategy: "Dollar-cost averaging + Index fund investing",
            priority: "high"
        });

        // House Down Payment (Year 5-7)
        if (profile.age < 35) {
            roadmap.push({
                year: currentYear + 6,
                age: profile.age + 6,
                milestone: "House Down Payment Ready",
                description: "Save for 20% down payment on ‚Ç±3M house",
                target: 600000,
                strategy: "Pag-IBIG housing loan + disciplined saving",
                priority: "high"
            });
        }

        // Mid-Career Investment Growth (Year 10-15)
        roadmap.push({
            year: currentYear + 12,
            age: profile.age + 12,
            milestone: "Investment Portfolio Milestone",
            description: "Reach ‚Ç±2M investment portfolio through consistent investing",
            target: 2000000,
            strategy: "Diversified portfolio + business opportunities",
            priority: "medium"
        });

        // Pre-Retirement Wealth (Year 20-25)
        roadmap.push({
            year: currentYear + 20,
            age: profile.age + 20,
            milestone: "Pre-Retirement Security",
            description: "Accumulate ‚Ç±5M for approaching retirement",
            target: 5000000,
            strategy: "Conservative growth + passive income",
            priority: "high"
        });

        // Retirement Goal
        roadmap.push({
            year: retirementYear,
            age: this.retirementAge,
            milestone: "Financial Independence",
            description: "Achieve ‚Ç±10M retirement fund for comfortable Filipino retirement",
            target: 10000000,
            strategy: "Retirement fund + passive income streams",
            priority: "high"
        });

        return roadmap;
    }

    // Develop investment strategy based on life stage
    developInvestmentStrategy(profile) {
        const stage = this.determineInvestmentStage(profile);
        const strategy = this.filipinoInvestmentLadder[stage];
        
        const monthlySavings = profile.monthlyIncome - profile.monthlyExpenses;
        const investmentAllocation = Math.round(monthlySavings * 0.7); // 70% of surplus for investments

        return {
            currentStage: strategy,
            monthlyInvestment: investmentAllocation,
            assetAllocation: this.calculateAssetAllocation(profile),
            recommendedPlatforms: this.getFilipinoPlatforms(stage),
            progressionPlan: this.createInvestmentProgression(profile),
            projectedReturns: this.projectInvestmentReturns(profile, investmentAllocation)
        };
    }

    // Determine investment stage based on profile
    determineInvestmentStage(profile) {
        if (!profile.hasInvestments && profile.currentSavings < 100000) return 'beginner';
        if (profile.currentSavings < 500000 || profile.age < 30) return 'intermediate';
        return 'advanced';
    }

    // Calculate optimal asset allocation for Filipino context
    calculateAssetAllocation(profile) {
        const age = profile.age;
        const stockPercentage = Math.max(20, 100 - age); // Rule of 100 minus age
        
        return {
            stocks: Math.round(stockPercentage),
            bonds: Math.round((100 - stockPercentage) * 0.6),
            realEstate: Math.round((100 - stockPercentage) * 0.3),
            cash: Math.round((100 - stockPercentage) * 0.1),
            explanation: `Aggressive allocation suitable for ${age}-year-old Filipino investor`
        };
    }

    // Get recommended Filipino investment platforms
    getFilipinoPlatforms(stage) {
        const platforms = {
            beginner: [
                { name: "CIMB Bank", type: "Digital Banking", minAmount: "‚Ç±1,000" },
                { name: "COL Financial", type: "Stock Trading", minAmount: "‚Ç±5,000" },
                { name: "Pag-IBIG MP2", type: "Government Fund", minAmount: "‚Ç±500" }
            ],
            intermediate: [
                { name: "BPI Trade", type: "Full Service Broker", minAmount: "‚Ç±10,000" },
                { name: "First Metro Sec", type: "UITF & Stocks", minAmount: "‚Ç±10,000" },
                { name: "FMETF", type: "Index Fund", minAmount: "‚Ç±2,500" }
            ],
            advanced: [
                { name: "BDO Nomura", type: "Investment Banking", minAmount: "‚Ç±50,000" },
                { name: "Philequity", type: "Mutual Funds", minAmount: "‚Ç±5,000" },
                { name: "AREIT", type: "Real Estate Investment", minAmount: "‚Ç±2,500" }
            ]
        };
        
        return platforms[stage] || platforms.intermediate;
    }

    // Add missing methods that might be causing issues
    createInvestmentProgression(profile) {
        return {
            currentStage: this.determineInvestmentStage(profile),
            nextStage: "advanced",
            timeToNext: "2-3 years",
            requirements: ["Build emergency fund", "Increase investment knowledge"]
        };
    }

    projectInvestmentReturns(profile, monthlyInvestment) {
        const years = [5, 10, 15, 20];
        const annualReturn = 0.08; // 8% average return
        
        return years.map(year => {
            const futureValue = monthlyInvestment * 12 * (((1 + annualReturn) ** year - 1) / annualReturn);
            return {
                year,
                projectedValue: Math.round(futureValue),
                totalContributions: monthlyInvestment * 12 * year
            };
        });
    }

    // Project career path and income growth
    projectCareerPath(profile) {
        const industryGrowthRates = {
            'IT/Technology': 0.12,
            'Finance/Banking': 0.08,
            'Healthcare': 0.07,
            'Education': 0.05,
            'Government': 0.04,
            'Business/Sales': 0.09
        };

        const growthRate = industryGrowthRates[profile.industry] || 0.07;
        const projections = [];
        let currentIncome = profile.monthlyIncome;

        // Project next 20 years
        for (let year = 1; year <= 20; year++) {
            currentIncome *= (1 + growthRate);
            if (year % 5 === 0) {
                projections.push({
                    year: new Date().getFullYear() + year,
                    age: profile.age + year,
                    monthlyIncome: Math.round(currentIncome),
                    careerLevel: this.determineCareerLevel(profile.age + year),
                    opportunities: this.getCareerOpportunities(profile.age + year)
                });
            }
        }

        return {
            projections,
            industryInsights: this.getIndustryInsights(profile.industry),
            skillRecommendations: this.getSkillRecommendations(profile),
            careerRisks: this.assessCareerRisks(profile)
        };
    }

    // Analyze life balance between personal and family goals
    analyzeLifeBalance(profile) {
        const personalGoals = this.calculatePersonalGoals(profile);
        const familyObligations = this.calculateFamilyObligations(profile);
        
        return {
            personalGoals,
            familyObligations,
            balanceScore: this.calculateBalanceScore(personalGoals, familyObligations),
            recommendations: this.getBalancingRecommendations(profile),
            filipinoContext: this.getFilipinoFamilyContext(profile),
            timeAllocation: this.suggestTimeAllocation(profile)
        };
    }

    // Calculate personal financial goals
    calculatePersonalGoals(profile) {
        const goals = [];
        const monthlySavings = profile.monthlyIncome - profile.monthlyExpenses;
        
        goals.push({
            goal: "Personal Emergency Fund",
            amount: profile.monthlyExpenses * 3, // 3 months for personal
            timeline: "12 months",
            monthlyContribution: Math.round((profile.monthlyExpenses * 3) / 12),
            priority: "high"
        });

        goals.push({
            goal: "Personal Investment Growth",
            amount: 1000000, // 1M personal wealth
            timeline: "10 years",
            monthlyContribution: Math.round(monthlySavings * 0.4),
            priority: "medium"
        });

        goals.push({
            goal: "Personal Development Fund",
            amount: 100000, // Skills, courses, certifications
            timeline: "2 years",
            monthlyContribution: Math.round(100000 / 24),
            priority: "medium"
        });

        return goals;
    }

    // Calculate family obligations and goals
    calculateFamilyObligations(profile) {
        const obligations = [];
        
        if (profile.dependents > 0) {
            obligations.push({
                obligation: "Family Support",
                amount: profile.monthlyIncome * 0.15, // 15% of income
                timeline: "Ongoing",
                monthlyContribution: Math.round(profile.monthlyIncome * 0.15),
                priority: "high"
            });
        }

        obligations.push({
            obligation: "Children's Education Fund",
            amount: 2000000, // 2M per child for college
            timeline: "18 years",
            monthlyContribution: Math.round(2000000 / (18 * 12)),
            priority: "high"
        });

        obligations.push({
            obligation: "Family Home Fund",
            amount: 500000, // Down payment
            timeline: "5 years",
            monthlyContribution: Math.round(500000 / (5 * 12)),
            priority: "high"
        });

        return obligations;
    }

    // Assess long-term financial risks
    assessLongTermRisks(profile) {
        const risks = [];

        // Income dependency risk
        if (profile.employmentType === 'employed') {
            risks.push({
                risk: "Single Income Source Dependency",
                severity: "medium",
                description: "Relying solely on employment income",
                mitigation: "Develop multiple income streams through side business or passive investments",
                timeline: "2-3 years"
            });
        }

        // Inflation risk
        risks.push({
            risk: "Inflation Erosion Risk",
            severity: "high",
            description: "Philippine inflation averaging 3-4% annually",
            mitigation: "Invest in inflation-beating assets like stocks and real estate",
            timeline: "Ongoing"
        });

        // Healthcare cost risk
        if (!profile.hasInsurance) {
            risks.push({
                risk: "Healthcare Cost Explosion",
                severity: "high",
                description: "Medical costs rising faster than income growth",
                mitigation: "Secure comprehensive health insurance and build health emergency fund",
                timeline: "Immediate"
            });
        }

        // Family obligation risk
        if (profile.dependents > 0) {
            risks.push({
                risk: "Family Financial Burden",
                severity: "medium",
                description: "Increasing family financial responsibilities",
                mitigation: "Set clear family financial boundaries and teach financial literacy",
                timeline: "1-2 years"
            });
        }

        return risks;
    }

    // Calculate milestone targets
    calculateMilestoneTargets(profile) {
        const targets = [];
        const yearsToRetirement = this.retirementAge - profile.age;
        
        // Every 5-year milestone
        for (let years = 5; years <= yearsToRetirement; years += 5) {
            const targetAge = profile.age + years;
            const expectedWealth = this.calculateExpectedWealth(profile, years);
            
            targets.push({
                age: targetAge,
                year: new Date().getFullYear() + years,
                targetWealth: expectedWealth,
                benchmarkStatus: this.getBenchmarkStatus(targetAge, expectedWealth),
                keyFocus: this.getAgeFocus(targetAge)
            });
        }

        return targets;
    }

    // Simulate AI processing with realistic delays
    async simulateAIProcessing() {
        const stages = [
            { message: 'Analyzing your life stage and goals...', delay: 800 },
            { message: 'Creating your financial roadmap...', delay: 900 },
            { message: 'Calculating investment strategies...', delay: 700 },
            { message: 'Projecting career growth potential...', delay: 600 },
            { message: 'Balancing personal and family priorities...', delay: 800 },
            { message: 'Optimizing your Filipino financial plan...', delay: 500 }
        ];

        try {
            for (const stage of stages) {
                console.log(`üîÑ ${stage.message}`);
                await this.updateLoadingMessage(stage.message);
                await this.delay(stage.delay);
            }
            console.log('‚úÖ AI processing simulation complete');
        } catch (error) {
            console.error('‚ùå Error in AI processing simulation:', error);
            throw error;
        }
    }

    async updateLoadingMessage(message) {
        const loadingText = this.elements.loadingState?.querySelector('p');
        if (loadingText) {
            loadingText.textContent = message;
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Render the financial roadmap timeline
    renderFinancialRoadmap(roadmap) {
        if (!this.elements.financialTimeline) return;

        const timelineHTML = roadmap.map(milestone => {
            const progressBar = milestone.currentProgress !== undefined ? 
                `<div class="progress-bar">
                    <div class="progress-fill" style="width: ${Math.round(milestone.currentProgress * 100)}%"></div>
                    <span class="progress-text">${Math.round(milestone.currentProgress * 100)}% Complete</span>
                </div>` : '';
            
            return `
                <div class="timeline-event">
                    <div class="timeline-date">${milestone.year} (Age ${milestone.age})</div>
                    <div class="timeline-title">${milestone.milestone}</div>
                    <div class="timeline-description">
                        <p><strong>Goal:</strong> ${milestone.description}</p>
                        <p><strong>Target:</strong> ‚Ç±${milestone.target.toLocaleString()}</p>
                        <p><strong>Strategy:</strong> ${milestone.strategy}</p>
                        ${progressBar}
                    </div>
                </div>
            `;
        }).join('');

        this.elements.financialTimeline.innerHTML = timelineHTML;
    }

    // Render data insights based on real user data
    renderDataInsights(profile) {
        // Add insights at the top of the timeline
        if (!this.elements.financialTimeline) return;
        
        const savingsRate = profile.monthlyIncome > 0 ? 
            Math.round(((profile.monthlyIncome - profile.monthlyExpenses) / profile.monthlyIncome) * 100) : 0;
        
        const emergencyFundMonths = profile.monthlyExpenses > 0 ? 
            Math.round((profile.currentSavings / profile.monthlyExpenses) * 10) / 10 : 0;
        
        const dataInsightsHTML = `
            <div class="data-insights">
                <h3>üìä Your Financial Snapshot</h3>
                <div class="insights-grid">
                    <div class="insight-card">
                        <div class="insight-value">‚Ç±${profile.monthlyIncome.toLocaleString()}</div>
                        <div class="insight-label">Monthly Income</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-value">‚Ç±${profile.monthlyExpenses.toLocaleString()}</div>
                        <div class="insight-label">Monthly Expenses</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-value">${savingsRate}%</div>
                        <div class="insight-label">Savings Rate</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-value">${emergencyFundMonths}</div>
                        <div class="insight-label">Emergency Fund (Months)</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-value">${profile.transactionCount}</div>
                        <div class="insight-label">Transactions Analyzed</div>
                    </div>
                    <div class="insight-card">
                        <div class="insight-value">${profile.accountCount}</div>
                        <div class="insight-label">Bank Accounts</div>
                    </div>
                </div>
                ${profile.isUsingFallback ? 
                    '<p class="fallback-notice">‚ö†Ô∏è Some data is estimated. Add more transactions for better accuracy.</p>' : 
                    '<p class="data-notice">‚úÖ Analysis based on your real financial data.</p>'
                }
            </div>
        `;
        
        this.elements.financialTimeline.innerHTML = dataInsightsHTML + this.elements.financialTimeline.innerHTML;
    }

    // Render investment insights
    renderInvestmentInsights(strategy) {
        if (!this.elements.investmentContent) return;

        const platformsHTML = strategy.recommendedPlatforms.map(platform => 
            `<li><strong>${platform.name}</strong> (${platform.type}) - Min: ${platform.minAmount}</li>`
        ).join('');

        this.elements.investmentContent.innerHTML = `
            <h3>Your Investment Stage: ${strategy.currentStage.name}</h3>
            <p><strong>Monthly Investment Budget:</strong> ‚Ç±${strategy.monthlyInvestment.toLocaleString()}</p>
            
            <h4>Recommended Asset Allocation:</h4>
            <ul>
                <li>Stocks: ${strategy.assetAllocation.stocks}%</li>
                <li>Bonds: ${strategy.assetAllocation.bonds}%</li>
                <li>Real Estate: ${strategy.assetAllocation.realEstate}%</li>
                <li>Cash: ${strategy.assetAllocation.cash}%</li>
            </ul>
            
            <h4>Recommended Filipino Platforms:</h4>
            <ul>${platformsHTML}</ul>
            
            <h4>Investment Instruments for Your Stage:</h4>
            <p>${strategy.currentStage.instruments.join(', ')}</p>
            <p><strong>Expected Return:</strong> ${strategy.currentStage.expectedReturn} annually</p>
        `;
    }

    // Render career projection
    renderCareerProjection(career) {
        if (!this.elements.careerContent) return;

        const projectionsHTML = career.projections.map(proj => 
            `<li><strong>${proj.year}</strong> (Age ${proj.age}): ‚Ç±${proj.monthlyIncome.toLocaleString()}/month - ${proj.careerLevel}</li>`
        ).join('');

        this.elements.careerContent.innerHTML = `
            <h3>20-Year Career Projection</h3>
            <ul>${projectionsHTML}</ul>
            
            <h4>Industry Insights:</h4>
            <p>${career.industryInsights}</p>
            
            <h4>Skill Development Recommendations:</h4>
            <ul>
                ${career.skillRecommendations.map(skill => `<li>${skill}</li>`).join('')}
            </ul>
        `;
    }

    // Render life balancing act
    renderLifeBalance(balance) {
        if (!this.elements.balancingActContent) return;

        const personalHTML = balance.personalGoals.map(goal => 
            `<li><strong>${goal.goal}</strong>: ‚Ç±${goal.amount.toLocaleString()} (‚Ç±${goal.monthlyContribution}/month)</li>`
        ).join('');

        const familyHTML = balance.familyObligations.map(obligation => 
            `<li><strong>${obligation.obligation}</strong>: ‚Ç±${obligation.amount.toLocaleString()} (‚Ç±${obligation.monthlyContribution}/month)</li>`
        ).join('');

        this.elements.balancingActContent.innerHTML = `
            <h3>Balance Score: ${balance.balanceScore}/100</h3>
            
            <h4>Personal Financial Goals:</h4>
            <ul>${personalHTML}</ul>
            
            <h4>Family Obligations:</h4>
            <ul>${familyHTML}</ul>
            
            <h4>Filipino Family Context:</h4>
            <p>${balance.filipinoContext}</p>
            
            <h4>Balancing Recommendations:</h4>
            <ul>
                ${balance.recommendations.map(rec => `<li>${rec}</li>`).join('')}
            </ul>
        `;
    }

    // Helper methods for calculations
    getNextLifeStage(currentStage) {
        const stages = Object.keys(this.filipinoLifeStages);
        const currentIndex = stages.indexOf(currentStage);
        return stages[currentIndex + 1] || stages[stages.length - 1];
    }

    calculateTransitionYears(age) {
        const stageTransitions = { 26: 1, 32: 1, 38: 1, 45: 1, 52: 1, 59: 1 };
        for (const transitionAge of Object.keys(stageTransitions)) {
            if (age < parseInt(transitionAge)) {
                return parseInt(transitionAge) - age;
            }
        }
        return 0;
    }

    calculateStageReadiness(profile) {
        // Calculate readiness score based on financial metrics
        const emergencyFundRatio = (profile.currentSavings / profile.monthlyExpenses) / 6;
        const savingsRate = (profile.monthlyIncome - profile.monthlyExpenses) / profile.monthlyIncome;
        const investmentReadiness = profile.hasInvestments ? 1 : 0;
        
        return Math.min(100, Math.round((emergencyFundRatio * 40 + savingsRate * 40 + investmentReadiness * 20) * 100));
    }

    getStageRecommendations(profile) {
        const stage = this.filipinoLifeStages[profile.lifeStage];
        return stage.strategies.map(strategy => 
            `Focus on ${strategy} aligned with your ${stage.name} priorities`
        );
    }

    determineCareerLevel(age) {
        if (age < 30) return "Junior/Associate Level";
        if (age < 35) return "Senior Level";
        if (age < 40) return "Lead/Supervisory Level";
        if (age < 45) return "Management Level";
        if (age < 50) return "Senior Management";
        return "Executive/Director Level";
    }

    getCareerOpportunities(age) {
        const opportunities = {
            20: ["Skill Building", "Certifications", "Side Projects"],
            30: ["Leadership Roles", "Specialization", "Advanced Degrees"],
            40: ["Management Positions", "Consulting", "Business Ownership"],
            50: ["Executive Roles", "Board Positions", "Mentoring"]
        };
        
        const ageGroup = Math.floor(age / 10) * 10;
        return opportunities[ageGroup] || opportunities[50];
    }

    getIndustryInsights(industry) {
        const insights = {
            'IT/Technology': "Philippine IT industry growing 8-12% annually. AI and cloud skills in high demand.",
            'Finance/Banking': "Digital banking transformation creating new opportunities. Fintech skills valuable.",
            'Healthcare': "Aging population increasing healthcare demand. Telemedicine growing rapidly.",
            'Education': "EdTech revolution creating new teaching methods. Online education expanding.",
            'Government': "Stable career path with pension benefits. Digital governance initiatives growing.",
            'Business/Sales': "E-commerce boom creating sales opportunities. Digital marketing skills essential."
        };
        
        return insights[industry] || "Industry showing steady growth with digital transformation opportunities.";
    }

    getSkillRecommendations(profile) {
        const skillsByIndustry = {
            'IT/Technology': ["Cloud Computing", "AI/Machine Learning", "Cybersecurity", "Mobile Development"],
            'Finance/Banking': ["Data Analytics", "Blockchain", "Risk Management", "Regulatory Compliance"],
            'Healthcare': ["Telemedicine", "Health Informatics", "Patient Care", "Medical Technology"],
            'Education': ["EdTech Tools", "Online Teaching", "Curriculum Development", "Educational Psychology"],
            'Government': ["Public Administration", "Policy Analysis", "Digital Governance", "Project Management"],
            'Business/Sales': ["Digital Marketing", "E-commerce", "Customer Analytics", "Business Development"]
        };
        
        return skillsByIndustry[profile.industry] || ["Leadership", "Communication", "Strategic Thinking", "Digital Literacy"];
    }

    assessCareerRisks(profile) {
        return [
            "Automation and AI disruption in traditional roles",
            "Economic downturns affecting job security",
            "Skills obsolescence due to technological change",
            "Industry consolidation reducing opportunities"
        ];
    }

    calculateBalanceScore(personalGoals, familyObligations) {
        const personalTotal = personalGoals.reduce((sum, goal) => sum + goal.monthlyContribution, 0);
        const familyTotal = familyObligations.reduce((sum, obl) => sum + obl.monthlyContribution, 0);
        const total = personalTotal + familyTotal;
        
        if (total === 0) return 50; // Default neutral score
        
        const personalRatio = personalTotal / total;
        // Optimal balance is around 60% personal, 40% family
        const optimalPersonalRatio = 0.6;
        const deviation = Math.abs(personalRatio - optimalPersonalRatio);
        
        return Math.round(100 - (deviation * 100));
    }

    getBalancingRecommendations(profile) {
        return [
            "Set clear boundaries between personal and family financial goals",
            "Communicate openly with family about financial priorities",
            "Create separate funds for personal development and family needs",
            "Review and adjust balance quarterly based on life changes",
            "Consider family financial education to reduce dependency"
        ];
    }

    getFilipinoFamilyContext(profile) {
        return "In Filipino culture, family financial support is deeply valued. The key is finding sustainable balance between 'utang na loob' (debt of gratitude) and personal financial security. Consider implementing gradual financial independence for family members while maintaining support.";
    }

    suggestTimeAllocation(profile) {
        return {
            personalGoals: "60%",
            familyObligations: "40%",
            explanation: "Recommended allocation for sustainable long-term financial health"
        };
    }

    calculateExpectedWealth(profile, years) {
        const monthlySavings = profile.monthlyIncome - profile.monthlyExpenses;
        const annualSavings = monthlySavings * 12;
        const growthRate = 0.08; // 8% annual return assumption
        
        // Future value of annuity formula
        const futureValue = annualSavings * (((1 + growthRate) ** years - 1) / growthRate);
        return Math.round(futureValue + profile.currentSavings * ((1 + growthRate) ** years));
    }

    getBenchmarkStatus(age, wealth) {
        const benchmarks = {
            30: 500000,
            35: 1000000,
            40: 2500000,
            45: 5000000,
            50: 7500000,
            55: 10000000
        };
        
        const benchmark = benchmarks[age] || 0;
        if (wealth >= benchmark * 1.2) return "Ahead of Target";
        if (wealth >= benchmark * 0.8) return "On Track";
        return "Behind Target";
    }

    getAgeFocus(age) {
        if (age < 30) return "Career Building & Investment Start";
        if (age < 35) return "Wealth Accumulation & Family Planning";
        if (age < 40) return "Peak Earning & Investment Growth";
        if (age < 50) return "Wealth Preservation & Retirement Planning";
        return "Retirement Security & Legacy Planning";
    }

    // State management
    showState(stateName) {
        const stateElements = {
            'loading-state': this.elements.loadingState,
            'content-state': this.elements.contentState,
            'empty-state': this.elements.emptyState
        };

        // Hide all states
        Object.values(stateElements).forEach(element => {
            if (element) {
                element.style.display = 'none';
                element.classList.add('hidden');
            }
        });

        // Show the requested state
        const targetElement = stateElements[stateName];
        if (targetElement) {
            targetElement.style.display = 'block';
            targetElement.classList.remove('hidden');
        }
    }

    // Main autonomous execution
    async start() {
        try {
            console.log('üîÑ Starting Pera Planner AI analysis...');
            this.showState('loading-state');
            
            if (this.testMode) {
                // Quick test mode - skip complex processing
                console.log('üß™ TEST MODE: Quick rendering...');
                await this.delay(2000);
                this.renderTestContent();
                this.showState('content-state');
                console.log('üéâ Test mode complete!');
                return;
            }

            if (this.debugMode) {
                // Debug mode - use fallback data without auth
                console.log('üêõ DEBUG MODE: Using fallback data...');
                this.userProfile = this.generateFallbackProfile();
                this.userProfile.isUsingFallback = true;
                this.userProfile.debugMode = true;
                console.log('‚úÖ Debug profile ready:', this.userProfile);
                
                // Skip auth and continue with planning
                console.log('üß† Creating financial plan with debug data...');
                this.financialPlan = await this.createFinancialPlan(this.userProfile);
                console.log('‚úÖ Financial plan created:', this.financialPlan);
                
                // Render all components
                console.log('üé® Rendering components...');
                this.renderDataInsights(this.userProfile);
                this.renderFinancialRoadmap(this.financialPlan.financialRoadmap);
                this.renderInvestmentInsights(this.financialPlan.investmentStrategy);
                this.renderCareerProjection(this.financialPlan.careerProjection);
                this.renderLifeBalance(this.financialPlan.familyBalancing);
                console.log('‚úÖ All components rendered');
                
                // Show content
                this.showState('content-state');
                this.planningComplete = true;
                console.log('üéâ Debug mode complete!');
                return;
            }
            
            // Wait for user authentication
            console.log('üîê Waiting for user authentication...');
            try {
                await this.waitForAuth();
            } catch (authError) {
                console.error('‚ùå Authentication failed:', authError);
                // Use fallback profile for demo purposes
                console.log('üîÑ Using fallback profile for demo...');
                this.userProfile = this.generateFallbackProfile();
                this.userProfile.isUsingFallback = true;
                this.userProfile.authError = true;
            }
            
            // Generate user profile from real Firestore data (if authenticated)
            if (this.currentUser && !this.userProfile) {
                console.log('üë§ Generating user profile from real data...');
                this.userProfile = await this.generateUserProfile();
            }
            
            console.log('‚úÖ User profile ready:', this.userProfile);
            
            // Check if user has sufficient data for planning
            if (this.userProfile.authError) {
                console.log('‚ö†Ô∏è Authentication error - showing demo with fallback data');
                // Continue with fallback data for demo purposes
            } else if (this.userProfile.isUsingFallback && (this.userProfile.transactionCount === 0 || this.userProfile.accountCount === 0)) {
                console.log('‚ö†Ô∏è Insufficient data for planning - showing empty state');
                this.showEmptyStateWithRealData();
                return;
            }

            // Perform AI planning with real data
            console.log('üß† Creating financial plan with real user data...');
            this.financialPlan = await this.createFinancialPlan(this.userProfile);
            console.log('‚úÖ Financial plan created:', this.financialPlan);
            
            // Render all components
            console.log('üé® Rendering components...');
            this.renderDataInsights(this.userProfile);
            this.renderFinancialRoadmap(this.financialPlan.financialRoadmap);
            this.renderInvestmentInsights(this.financialPlan.investmentStrategy);
            this.renderCareerProjection(this.financialPlan.careerProjection);
            this.renderLifeBalance(this.financialPlan.familyBalancing);
            console.log('‚úÖ All components rendered');
            
            // Show content
            this.showState('content-state');
            
            // Mark planning as complete
            this.planningComplete = true;
            
            console.log('üéâ Pera Planner AI planning complete!');
            
        } catch (error) {
            console.error('‚ùå Error in Pera Planner AI:', error);
            console.error('Stack trace:', error.stack);
            this.showError('An error occurred while creating your financial plan. Please refresh and try again.');
            // Fallback to empty state
            this.showState('empty-state');
        }
    }

    // Wait for Firebase authentication
    async waitForAuth() {
        return new Promise((resolve, reject) => {
            if (this.currentUser) {
                console.log('‚úÖ User already authenticated');
                resolve();
                return;
            }
            
            console.log('‚è≥ Waiting for authentication...');
            
            const unsubscribe = onAuthStateChanged(this.auth, (user) => {
                if (user) {
                    console.log('‚úÖ Authentication successful:', user.uid);
                    this.currentUser = user;
                    unsubscribe();
                    resolve();
                } else {
                    console.log('‚ùå No authenticated user found');
                    unsubscribe();
                    reject(new Error('User not authenticated'));
                }
            });
            
            // Timeout after 5 seconds
            setTimeout(() => {
                console.log('‚è∞ Authentication timeout');
                unsubscribe();
                reject(new Error('Authentication timeout'));
            }, 5000);
        });
    }

    // Show empty state with personalized message based on real data
    showEmptyStateWithRealData() {
        this.showState('empty-state');
        
        const emptyContainer = this.elements.emptyState;
        if (emptyContainer) {
            const messageElement = emptyContainer.querySelector('p');
            const titleElement = emptyContainer.querySelector('h2');
            
            if (this.userProfile.transactionCount === 0 && this.userProfile.accountCount === 0) {
                titleElement.textContent = 'Welcome to Pera Planner!';
                messageElement.textContent = 'To create your personalized financial roadmap, please add some transactions and bank accounts first. This helps our AI understand your financial patterns and create better recommendations.';
            } else if (this.userProfile.transactionCount === 0) {
                titleElement.textContent = 'Add Some Transactions';
                messageElement.textContent = 'Your Pera Planner needs transaction history to analyze your spending patterns and create a personalized financial plan.';
            } else if (this.userProfile.accountCount === 0) {
                titleElement.textContent = 'Add Your Bank Accounts';
                messageElement.textContent = 'Connect your bank accounts so Pera Planner can track your savings and create accurate financial projections.';
            }
        }
    }

    // Simple test content for debugging
    renderTestContent() {
        if (this.elements.financialTimeline) {
            this.elements.financialTimeline.innerHTML = `
                <div class="timeline-event">
                    <div class="timeline-date">2025 (Age 29)</div>
                    <div class="timeline-title">Emergency Fund Complete</div>
                    <div class="timeline-description">
                        <p><strong>Goal:</strong> Build 6-month emergency fund</p>
                        <p><strong>Target:</strong> ‚Ç±390,000</p>
                        <p><strong>Strategy:</strong> Automated savings + Side hustle</p>
                    </div>
                </div>
            `;
        }

        if (this.elements.investmentContent) {
            this.elements.investmentContent.innerHTML = `
                <h3>Your Investment Stage: Paglaki (Growth)</h3>
                <p><strong>Monthly Investment Budget:</strong> ‚Ç±14,000</p>
                <h4>Recommended Asset Allocation:</h4>
                <ul>
                    <li>Stocks: 72%</li>
                    <li>Bonds: 17%</li>
                    <li>Real Estate: 8%</li>
                    <li>Cash: 3%</li>
                </ul>
            `;
        }

        if (this.elements.careerContent) {
            this.elements.careerContent.innerHTML = `
                <h3>20-Year Career Projection</h3>
                <ul>
                    <li><strong>2029</strong> (Age 33): ‚Ç±134,000/month - Senior Level</li>
                    <li><strong>2034</strong> (Age 38): ‚Ç±211,000/month - Lead/Supervisory Level</li>
                    <li><strong>2039</strong> (Age 43): ‚Ç±332,000/month - Management Level</li>
                </ul>
            `;
        }

        if (this.elements.balancingActContent) {
            this.elements.balancingActContent.innerHTML = `
                <h3>Balance Score: 75/100</h3>
                <h4>Personal Financial Goals:</h4>
                <ul>
                    <li><strong>Personal Emergency Fund:</strong> ‚Ç±195,000 (‚Ç±16,250/month)</li>
                    <li><strong>Personal Investment Growth:</strong> ‚Ç±1,000,000 (‚Ç±8,000/month)</li>
                </ul>
                <h4>Family Obligations:</h4>
                <ul>
                    <li><strong>Family Support:</strong> ‚Ç±12,750 (‚Ç±12,750/month)</li>
                    <li><strong>Children's Education Fund:</strong> ‚Ç±2,000,000 (‚Ç±9,259/month)</li>
                </ul>
            `;
        }
    }

    showError(message) {
        const errorElement = document.createElement('div');
        errorElement.className = 'error-message';
        errorElement.innerHTML = `
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Planning Error</h3>
            <p>${message}</p>
        `;
        
        document.body.appendChild(errorElement);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            errorElement.remove();
        }, 5000);
    }
}

// Initialize the Pera Planner AI when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Pera Planner DOM loaded, initializing...');
    try {
        const peraPlanner = new PeraPlannerAI();
        console.log('‚úÖ Pera Planner instance created');
        
        // Add timeout mechanism to prevent infinite loading
        const timeoutId = setTimeout(() => {
            console.error('‚è∞ Pera Planner timeout - forcing fallback to empty state');
            const loadingState = document.getElementById('loading-state');
            const emptyState = document.getElementById('empty-state');
            if (loadingState) {
                loadingState.style.display = 'none';
                loadingState.classList.add('hidden');
            }
            if (emptyState) {
                emptyState.style.display = 'block';
                emptyState.classList.remove('hidden');
                const errorMsg = emptyState.querySelector('p');
                if (errorMsg) {
                    errorMsg.textContent = 'Planning is taking longer than expected. Please refresh the page to try again.';
                }
            }
        }, 15000); // 15 second timeout
        
        // Start the planner
        peraPlanner.start().then(() => {
            clearTimeout(timeoutId);
            console.log('‚úÖ Pera Planner completed successfully');
        }).catch((error) => {
            clearTimeout(timeoutId);
            console.error('‚ùå Pera Planner failed:', error);
        });
        
    } catch (error) {
        console.error('‚ùå Error initializing Pera Planner:', error);
        // Show error to user
        const loadingState = document.getElementById('loading-state');
        const emptyState = document.getElementById('empty-state');
        if (loadingState) loadingState.style.display = 'none';
        if (emptyState) {
            emptyState.style.display = 'block';
            emptyState.classList.remove('hidden');
            const errorMsg = emptyState.querySelector('p');
            if (errorMsg) {
                errorMsg.textContent = 'Error loading Pera Planner. Please refresh the page.';
            }
        }
    }
});
